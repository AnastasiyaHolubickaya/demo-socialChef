{"version":3,"sources":["components/Message/Message.module.css","components/Message/AddMessage/AddMessage.module.css","components/Message/Users/Users.module.css","hoc/WithAuthRedirect.js","components/Message/Users/Users.js","components/Message/AddMessage/AddMessage.js","components/Message/AddMessage/AddMessageContainer.js","components/SearchUsers/SearchUsers.js","components/Message/Message.js","components/Message/MessageApi.js"],"names":["module","exports","mapStateToPropsRedirect","state","isAuth","auth","Users","props","dialog","dataDialogs","map","d","key","id","className","classes","src","img","alt","to","name","mess","maxLength300","maxLengthCreator","MessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","requiredField","divButtonSend","Button","value","AddMessage","block","formData","addNewMess","message","AddMessageContainer","connect","dialogs","dispatch","addMessActionCreator","SearchUsers","searchUsers","search","inputSearch","type","buttonSearch","Counter","counterUsers","text","numbers","Message","MessageApi","this","React","Component","compose","RedirectComponent"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,YAAc,6BAA6B,aAAe,8BAA8B,YAAc,6BAA6B,MAAQ,uBAAuB,OAAS,wBAAwB,YAAc,6BAA6B,aAAe,8BAA8B,aAAe,8BAA8B,KAAO,sBAAsB,QAAU,yBAAyB,YAAc,+B,oBCA5eD,EAAOC,QAAU,CAAC,cAAgB,oC,oBCAlCD,EAAOC,QAAU,CAAC,OAAS,sBAAsB,OAAS,wB,mHCIrDC,EAA0B,SAACC,GAAD,MAAW,CACtCC,OAAQD,EAAME,KAAKD,S,uECYNE,EAdH,SAACC,GAEX,IACIC,EAASD,EAAME,YAAYC,KAAI,SAAAC,GAAC,OAChC,yBAAKC,IAAKD,EAAEE,GAAIC,UAAWC,IAAQP,QAC/B,yBAAKQ,IAAKL,EAAEM,IAAKC,IAAI,KACrB,kBAAC,IAAD,CAASC,GAJR,YAImBR,EAAEE,IAAtB,IAA2B,2BAAIF,EAAES,KAAN,KAA3B,MACA,8BAAOT,EAAEU,UAIjB,OAAQ,6BAAMb,EAAN,M,0CCPNc,EAAeC,YAAiB,KAUhCC,EAAmBC,YAAU,CAG/BC,KAAM,WAHeD,EARL,SAAClB,GACjB,OACI,0BAAMoB,SAAUpB,EAAMqB,cAClB,6BAAK,kBAACC,EAAA,EAAD,CAAOT,KAAM,UAAWU,YAAa,UAAWC,UAAWC,IAAUC,SAAU,CAACC,IAAeZ,MACpG,yBAAKR,UAAWC,IAAQoB,eAAxB,IAAwC,kBAACC,EAAA,EAAD,CAAQC,MAAM,gEAyBjDC,EAdE,SAAC/B,GAMhB,OACI,yBAAKO,UAAWC,IAAQwB,OACpB,kBAAC,EAAD,CAAO9B,YAAeF,EAAME,cAC5B,uIACA,kBAACe,EAAD,CAAkBG,SATT,SAACa,GAEdjC,EAAMkC,WAAWD,EAASE,cCLlBC,EAJYC,aAdN,SAACzC,GACnB,MAAO,CACHM,YAAaN,EAAM0C,QAAQpC,gBAIV,SAACqC,GACxB,MAAO,CACHL,WAAY,SAACC,GACTI,EAASC,YAAqBL,QAKZE,CAA6CN,GCJzDU,EAVI,SAACzC,GACjB,OAAS,yBAAKO,UAAWC,IAAQkC,aAE7B,yBAAKnC,UAAWC,IAAQmC,QACpB,2BAAOpC,UAAWC,IAAQoC,YAAaC,KAAK,OAAOtB,YAAY,kEAC/D,4BAAQhB,UAAWC,IAAQsC,cAA3B,sCCFRC,EAAU,SAAC/C,GACb,OAAS,yBAAKO,UAAWC,IAAQwC,cAC7B,0BAAMzC,UAAWC,IAAQyC,MAAzB,wHACA,0BAAM1C,UAAWC,IAAQ0C,SAAzB,QAmBUC,EAbA,SAACnD,GAEb,OACI,yBAAKO,UAAWC,IAAQ8B,SACpB,sFACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,Q,OClBNc,E,8NAOE,OACI,kBAAC,EAAYC,KAAKrD,W,GARJsD,IAAMC,WA2BhBC,sBACZnB,aARkB,SAACzC,GAAD,MAAY,ONlBD,SAAC2D,GAAc,IACtCE,EADqC,iLAGnC,OAAKJ,KAAKrD,MAAMH,OACT,kBAAC0D,EAAaF,KAAKrD,OADK,kBAAC,IAAD,CAAUY,GAAK,eAHX,GACV0C,IAAMC,WAQvC,OAF0BlB,YAAS1C,EAAT0C,CAAkCoB,KMkBhDD,CAGdJ","file":"static/js/3.063b3f12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Message_dialogs__2baLX\",\"active\":\"Message_active__17BpW\",\"dialogItems\":\"Message_dialogItems__23tSs\",\"messageItems\":\"Message_messageItems__13WnP\",\"searchUsers\":\"Message_searchUsers__9t9jj\",\"title\":\"Message_title__-9VyK\",\"search\":\"Message_search__gkp-3\",\"inputSearch\":\"Message_inputSearch__3V8kI\",\"buttonSearch\":\"Message_buttonSearch__2KJW5\",\"counterUsers\":\"Message_counterUsers__rp0hV\",\"text\":\"Message_text__2kiW0\",\"numbers\":\"Message_numbers__4YsQx\",\"viewingInfo\":\"Message_viewingInfo___2Tny\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"divButtonSend\":\"AddMessage_divButtonSend__30J92\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Users_dialog__3AOii\",\"active\":\"Users_active__1d9P7\"};","import React from \"react\";\r\n\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet  mapStateToPropsRedirect = (state) =>({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n export const WithAuthRedirect = (Component) =>{\r\n    class RedirectComponent extends  React.Component{\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to = '/login'/>;\r\n            return <Component{...this.props}/>\r\n        }\r\n    }\r\n    let ConnectAuthRedirect = connect (mapStateToPropsRedirect)(RedirectComponent);//дважды оборачиваем компоненту в connect чтоб взять из пропсов необходимое let  mapStateToPropsRedirect =...\r\n\r\n    return ConnectAuthRedirect;\r\n};\r\n//WithAuthRedirect - hoc (компонента высшего порядка) функция, которая принимает\r\n//как параметр компоненту и возвращает к ней контейнерную компоненту\r\n// в данном случаее hoc делает перенаправление (с помошью компоненты Redirect)на другую страницу согласно условия","import React from \"react\";\r\nimport classes from './Users.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Users = (props) =>{\r\n    //console.log(props);\r\n    let path='/dialogs/';\r\n    let dialog = props.dataDialogs.map(d=>\r\n        <div key={d.id} className={classes.dialog}>\r\n            <img src={d.img} alt=\"\"/>\r\n            <NavLink to={path + d.id}> <b>{d.name} </b>  </NavLink>\r\n            <span>{d.mess}</span>\r\n        </div>\r\n    );\r\n\r\n    return( <div>{dialog} </div> )\r\n\r\n};\r\nexport  default  Users;","import React from \"react\";\r\nimport classes from \"./AddMessage.module.css\";\r\nimport Users from \"../Users/Users\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validation/validator\";\r\nimport {Textarea} from \"../../commons/FormControls/FormControls\";\r\nimport Button from \"../../Button/Button\";\r\n\r\nconst maxLength300 = maxLengthCreator(100);\r\n\r\nconst MessageForm = (props) =>{\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field name={'message'} placeholder={'message'} component={Textarea} validate={[requiredField, maxLength300]}/></div>\r\n            <div className={classes.divButtonSend}> <Button value=\"отправить\"/></div>\r\n        </form>\r\n    )\r\n};\r\nconst MessageReduxForm = reduxForm({//контейнерная компонента,созда-\r\n    // a unique name for the form\r\n    //каждая форма должна иметь уникальное строковое имя (для распознавания ее редаксформом)\r\n    form: 'message'//form: - это название не связано с form из store.js\r\n})(MessageForm);//-ется редаксформ над презентационной компонентой\r\n\r\n\r\nconst AddMessage = (props) =>{\r\n    const onSubmit = (formData) => {// сюда придут данные их формы, передаем эту  функцию в LoginReduxForm чтоб получить эти данные из формы\r\n        //alert(formData.message);\r\n        props.addNewMess(formData.message);\r\n    };\r\n\r\n    return(\r\n        <div className={classes.block}>\r\n            <Users dataDialogs = {props.dataDialogs}/>\r\n            <h3>добавить сообщение</h3>\r\n            <MessageReduxForm onSubmit = {onSubmit}/>\r\n        </div>\r\n    )\r\n};\r\nexport  default  AddMessage;\r\n\r\n/*const AddMessage = (props) =>{\r\n    //console.log(props)\r\n   // let inputRef = React.createRef();\r\n\r\n    let addMess = ()=>{//функция добавления mess\r\n        props.addNewMess();\r\n       // props.dispatch(addMessActionCreator());// вызываем (из пропсов) функцию из BLL\r\n    };\r\n    let changePost = (e) =>{ //функция изменения состояния значения инпута\r\n        let text =e.target.value;// берем введенное значение\r\n        props.changeMess(text);\r\n       // props.dispatch(changePostActionCreator(text));// передаем в функцию из BLL\r\n    };\r\n\r\n    return(\r\n        <div className={classes.block}>\r\n            <Users dataDialogs = {props.dataDialogs}/>\r\n            <h3>добавить сообщение</h3>\r\n            <input onChange={changePost} value={props.newText}  type=\"text\" className={`${classes.input_text} ${classes.reset_properties}`}  placeholder='your news...'/>\r\n            <button onClick={addMess} className={`${classes.send_btn} ${classes.reset_properties}`}>Send </button>\r\n\r\n\r\n        </div>\r\n\r\n    )*/","\r\nimport {addMessActionCreator} from \"../../../redux/dialogReducer\";\r\nimport AddMessage from \"./AddMessage\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dataDialogs: state.dialogs.dataDialogs\r\n    }\r\n\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      addNewMess: (message) => {\r\n          dispatch(addMessActionCreator(message));\r\n      }\r\n  }\r\n};\r\n\r\nconst AddMessageContainer = connect(mapStateToProps,mapDispatchToProps )(AddMessage);//сoздаем контейнерную компоненту для AddMessage с помощью библиотеки react-redux (connect)\r\n\r\n\r\n\r\nexport  default AddMessageContainer;\r\n\r\n/*\r\n const AddMessageContainer = (props) =>{\r\n    //console.log(props)\r\n    // let inputRef = React.createRef();\r\n   //\r\n\r\n    return(\r\n        <StoreContext.Consumer>\r\n            { (store) => {\r\n\r\n                let state = store.getState();\r\n                let addMess = ()=>{//функция добавления mess\r\n                    store.dispatch(addMessActionCreator());// вызываем (из пропсов) функцию из BLL\r\n                };\r\n                let changePost = (text) =>{ //функция изменения состояния значения инпута\r\n                    store.dispatch(changePostActionCreator(text));// передаем в функцию из BLL\r\n                };\r\n\r\n        return (   <AddMessage changeMess={changePost}\r\n                       addNewMess = {addMess}\r\n                       dataDialogs = {state.dialogs.dataDialogs}\r\n                       newText = {state.dialogs.newText}\r\n           />)\r\n             }\r\n         }\r\n        </StoreContext.Consumer>\r\n    )\r\n};\r\n*/","import classes from \"../Message/Message.module.css\";\r\nimport React from \"react\";\r\n\r\n\r\n\r\nconst SearchUsers = (props) =>{\r\n    return ( <div className={classes.searchUsers}>\r\n\r\n        <div className={classes.search}>\r\n            <input className={classes.inputSearch} type=\"text\" placeholder='введите имя'/>\r\n            <button className={classes.buttonSearch}> поиск</button>\r\n        </div>\r\n    </div>)\r\n};\r\n\r\nexport  default SearchUsers;","import React from \"react\";\r\nimport classes from './Message.module.css';\r\nimport AddMessageContainer from \"./AddMessage/AddMessageContainer\";\r\nimport SearchUsers from \"../SearchUsers/SearchUsers\";\r\n\r\n\r\n\r\n\r\nlet Counter = (props) =>{\r\n  return  (<div className={classes.counterUsers}>\r\n      <span className={classes.text}>всего пользователей online</span>\r\n      <span className={classes.numbers}>26</span>\r\n  </div>)\r\n};\r\n\r\n\r\n\r\nconst Message = (props) =>{\r\n    //console.log(props);\r\n    return(\r\n        <div className={classes.dialogs}>\r\n            <h1>сообщения</h1>\r\n            <SearchUsers/>\r\n            <Counter/>\r\n\r\n            <AddMessageContainer />\r\n\r\n        </div>\r\n    )\r\n};\r\nexport  default Message;\r\n\r\n/*<div className={classes.dialogItems}>\r\n                {<DialogItem  dataDialogs = {props.dataDialogs}/>}\r\n</div>\r\n<div className={classes.messageItems}>\r\n{<MessageItem  dataMessages = {props.dataMessages}/>}\r\n</div>*/","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport { WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport Message from \"./Message\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass MessageApi extends  React.Component{\r\n\r\n    componentDidMount(){\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Message {...this.props} />\r\n\r\n\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state)  =>({\r\n    //isAuth: state.auth.isAuth чтоб каждый раз не передавать через пропсы данные, необходимые hoc , одорачиваем ее в connect дважды - см WithAuthRedirect.js\r\n});\r\n\r\n//заменяем оборачивание компонент  одной функцией - compose (идем снизу вверх)\r\n//let AuthRedirectComponent = WithAuthRedirect(MessageApi);\r\n//export  default connect(mapStateToProps) (AuthRedirectComponent);\r\nexport  default compose(\r\n    connect(mapStateToProps),//2 export  default connect(mapStateToProps) (AuthRedirectComponent)\r\n    WithAuthRedirect//1 WithAuthRedirect(MessageApi)\r\n)(MessageApi)//(MessageApi)\r\n\r\n\r\n"],"sourceRoot":""}