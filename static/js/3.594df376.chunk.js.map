{"version":3,"sources":["components/Message/AddMessage/AddMessage.module.css","hoc/WithAuthRedirect.js","components/Message/AddMessage/AddMessage.js","components/Message/AddMessage/AddMessageContainer.js","components/Message/Message.js","components/Message/MessageApi.js"],"names":["module","exports","mapStateToPropsRedirect","state","isAuth","auth","maxLength300","maxLengthCreator","MessageReduxForm","reduxForm","form","props","onSubmit","handleSubmit","Field","name","placeholder","component","Textarea","validate","requiredField","className","classes","divButtonSend","Button","value","AddMessage","formData","addMessActionCreator","message","login","profile","photos","small","userId","this","getProfileThunkCreator","block","Users","massUsers","dataDialogs","React","Component","AddMessageContainer","connect","dialogs","Counter","counterUsers","text","numbers","Message","SearchUsersContainer","MessageApi","compose","RedirectComponent","to"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,cAAgB,kCAAkC,MAAQ,4B,oHCIvEC,EAA0B,SAACC,GAAD,MAAW,CACtCC,OAAQD,EAAME,KAAKD,S,+FCGjBE,EAAeC,YAAiB,KAUhCC,EAAmBC,YAAU,CAG/BC,KAAM,WAHeD,EARL,SAACE,GACjB,OACI,0BAAMC,SAAUD,EAAME,cAClB,6BAAK,kBAACC,EAAA,EAAD,CAAOC,KAAM,UAAWC,YAAa,UAAWC,UAAWC,IAAUC,SAAU,CAACC,IAAed,MACpG,yBAAKe,UAAWC,IAAQC,eAAxB,IAAwC,kBAACC,EAAA,EAAD,CAASC,MAAM,gEAmClDC,E,2MAlBbd,SAAW,SAACe,GACT,EAAKhB,MAAMiB,qBAAqBD,EAASE,QAAQ,EAAKlB,MAAMmB,MAAO,EAAKnB,MAAMoB,QAAQC,OAAOC,MAAO,EAAKtB,MAAMoB,QAAQG,S,mFAJvHC,KAAKxB,MAAMyB,uBAAuBD,KAAKxB,MAAMuB,U,+BAS5C,OACI,yBAAKb,UAAWC,IAAQe,OACpB,kBAACC,EAAA,EAAD,CAAOC,UAAWJ,KAAKxB,MAAM6B,cAC7B,uIACA,kBAAChC,EAAD,CAAkBI,SAAYuB,KAAKvB,gB,GAhBzB6B,IAAMC,W,QCLhBC,EAJYC,aAXN,SAACzC,GACnB,MAAO,CACHqC,YAAarC,EAAM0C,QAAQL,YAC3BV,MAAO3B,EAAME,KAAKyB,MAClBI,OAAQ/B,EAAME,KAAK6B,OACnBH,QAAS5B,EAAM4B,QAAQA,WAMqB,CAACH,yBAAsBQ,4BAA/CQ,CAAyElB,G,SCTjGoB,EAAU,SAACnC,GACb,OAAS,yBAAKU,UAAWC,IAAQyB,cAC7B,0BAAM1B,UAAWC,IAAQ0B,MAAzB,wHACA,0BAAM3B,UAAWC,IAAQ2B,SAAzB,OAmBUC,EAbA,SAACvC,GAEb,OACI,yBAAKU,UAAWC,IAAQuB,SACpB,kDACA,kBAACM,EAAA,EAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,Q,OClBNC,E,8NAOE,OACI,kBAAC,EAAYjB,KAAKxB,W,GARJ8B,IAAMC,WA2BhBW,sBACZT,aARkB,SAACzC,GAAD,MAAY,OJlBD,SAACuC,GAAc,IACtCY,EADqC,iLAGnC,OAAKnB,KAAKxB,MAAMP,OACT,kBAACsC,EAAaP,KAAKxB,OADK,kBAAC,IAAD,CAAU4C,GAAK,eAHX,GACVd,IAAMC,WAQvC,OAF0BE,YAAS1C,EAAT0C,CAAkCU,KIkBhDD,CAGdD","file":"static/js/3.594df376.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"divButtonSend\":\"AddMessage_divButtonSend__30J92\",\"block\":\"AddMessage_block__2zH6u\"};","import React from \"react\";\r\n\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet  mapStateToPropsRedirect = (state) =>({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n export const WithAuthRedirect = (Component) =>{\r\n    class RedirectComponent extends  React.Component{\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to = '/login'/>;\r\n            return <Component{...this.props}/>\r\n        }\r\n    }\r\n    let ConnectAuthRedirect = connect (mapStateToPropsRedirect)(RedirectComponent);//дважды оборачиваем компоненту в connect чтоб взять из пропсов необходимое let  mapStateToPropsRedirect =...\r\n\r\n    return ConnectAuthRedirect;\r\n};\r\n//WithAuthRedirect - hoc (компонента высшего порядка) функция, которая принимает\r\n//как параметр компоненту и возвращает к ней контейнерную компоненту\r\n// в данном случаее hoc делает перенаправление (с помошью компоненты Redirect)на другую страницу согласно условия","import React, {useEffect} from \"react\";\r\nimport classes from \"./AddMessage.module.css\";\r\nimport Users from \"../Users/Users\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validation/validator\";\r\nimport {Textarea} from \"../../commons/FormControls/FormControls\";\r\nimport Button from \"../../Button/Button\";\r\nimport {addMessActionCreator} from \"../../../redux/dialogReducer\";\r\n\r\nconst maxLength300 = maxLengthCreator(100);\r\n\r\nconst MessageForm = (props) =>{\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field name={'message'} placeholder={'message'} component={Textarea} validate={[requiredField, maxLength300]}/></div>\r\n            <div className={classes.divButtonSend}> <Button  value=\"отправить\"/></div>\r\n        </form>\r\n    )\r\n};\r\nconst MessageReduxForm = reduxForm({//контейнерная компонента,создается редаксформ над презентационной компонентой\r\n    // a unique name for the form\r\n    //каждая форма должна иметь уникальное строковое имя (для распознавания ее редаксформом)\r\n    form: 'message'//form: - это название не связано с form из store.js\r\n})(MessageForm);\r\n\r\n\r\nclass AddMessage extends  React.Component {\r\n    //\r\n    componentDidMount(){\r\n       this.props.getProfileThunkCreator(this.props.userId);\r\n    }\r\n\r\n    onSubmit = (formData) => {// сюда придут данные их формы, передаем эту  функцию в LoginReduxForm чтоб получить эти данные из формы\r\n       this.props.addMessActionCreator(formData.message,this.props.login, this.props.profile.photos.small, this.props.profile.userId);\r\n    };\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div className={classes.block}>\r\n                <Users massUsers={this.props.dataDialogs}/>\r\n                <h3>Добавить сообщение</h3>\r\n                <MessageReduxForm onSubmit = {this.onSubmit}/>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\nexport  default  AddMessage;\r\n\r\n/*const AddMessage = (props) =>{\r\n    //console.log(props)\r\n   // let inputRef = React.createRef();\r\n\r\n    let addMess = ()=>{//функция добавления mess\r\n        props.addNewMess();\r\n       // props.dispatch(addMessActionCreator());// вызываем (из пропсов) функцию из BLL\r\n    };\r\n    let changePost = (e) =>{ //функция изменения состояния значения инпута\r\n        let text =e.target.value;// берем введенное значение\r\n        props.changeMess(text);\r\n       // props.dispatch(changePostActionCreator(text));// передаем в функцию из BLL\r\n    };\r\n\r\n    return(\r\n        <div className={classes.block}>\r\n            <Users dataDialogs = {props.dataDialogs}/>\r\n            <h3>добавить сообщение</h3>\r\n            <input onChange={changePost} value={props.newText}  type=\"text\" className={`${classes.input_text} ${classes.reset_properties}`}  placeholder='your news...'/>\r\n            <button onClick={addMess} className={`${classes.send_btn} ${classes.reset_properties}`}>Send </button>\r\n\r\n\r\n        </div>\r\n\r\n    )*/","\r\nimport {addMessActionCreator} from \"../../../redux/dialogReducer\";\r\nimport AddMessage from \"./AddMessage\";\r\nimport {connect} from \"react-redux\";\r\nimport {getProfileThunkCreator} from \"../../../redux/profileReducer\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dataDialogs: state.dialogs.dataDialogs,\r\n        login: state.auth.login,\r\n        userId: state.auth.userId,\r\n        profile: state.profile.profile\r\n    }\r\n\r\n};\r\n\r\n\r\nconst AddMessageContainer = connect(mapStateToProps,{addMessActionCreator, getProfileThunkCreator} )(AddMessage);//сoздаем контейнерную компоненту для AddMessage с помощью библиотеки react-redux (connect)\r\n\r\n\r\n\r\nexport  default AddMessageContainer;\r\n\r\n/*\r\n const AddMessageContainer = (props) =>{\r\n    //console.log(props)\r\n    // let inputRef = React.createRef();\r\n   //\r\n\r\n    return(\r\n        <StoreContext.Consumer>\r\n            { (store) => {\r\n\r\n                let state = store.getState();\r\n                let addMess = ()=>{//функция добавления mess\r\n                    store.dispatch(addMessActionCreator());// вызываем (из пропсов) функцию из BLL\r\n                };\r\n                let changePost = (text) =>{ //функция изменения состояния значения инпута\r\n                    store.dispatch(changePostActionCreator(text));// передаем в функцию из BLL\r\n                };\r\n\r\n        return (   <AddMessage changeMess={changePost}\r\n                       addNewMess = {addMess}\r\n                       dataDialogs = {state.dialogs.dataDialogs}\r\n                       newText = {state.dialogs.newText}\r\n           />)\r\n             }\r\n         }\r\n        </StoreContext.Consumer>\r\n    )\r\n};\r\n*/","import React from \"react\";\r\nimport classes from './Message.module.css';\r\nimport AddMessageContainer from \"./AddMessage/AddMessageContainer\";\r\nimport SearchUsersContainer from \"../SearchUsers/SearchUsersContainer\";\r\n\r\n\r\n\r\n\r\nlet Counter = (props) =>{\r\n  return  (<div className={classes.counterUsers}>\r\n      <span className={classes.text}>всего пользователей online</span>\r\n      <span className={classes.numbers}>5</span>\r\n  </div>)\r\n};\r\n\r\n\r\n\r\nconst Message = (props) =>{\r\n    //console.log(props);\r\n    return(\r\n        <div className={classes.dialogs}>\r\n            <h1>Чат</h1>\r\n            <SearchUsersContainer/>\r\n            <Counter/>\r\n\r\n            <AddMessageContainer />\r\n\r\n        </div>\r\n    )\r\n};\r\nexport  default Message;\r\n\r\n/*<div className={classes.dialogItems}>\r\n                {<DialogItem  dataDialogs = {props.dataDialogs}/>}\r\n</div>\r\n<div className={classes.messageItems}>\r\n{<MessageItem  dataMessages = {props.dataMessages}/>}\r\n</div>*/","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport { WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport Message from \"./Message\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass MessageApi extends  React.Component{\r\n\r\n    componentDidMount(){\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Message {...this.props} />\r\n\r\n\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nlet mapStateToProps = (state)  =>({\r\n    //isAuth: state.auth.isAuth чтоб каждый раз не передавать через пропсы данные, необходимые hoc , одорачиваем ее в connect дважды - см WithAuthRedirect.js\r\n});\r\n\r\n//заменяем оборачивание компонент  одной функцией - compose (идем снизу вверх)\r\n//let AuthRedirectComponent = WithAuthRedirect(MessageApi);\r\n//export  default connect(mapStateToProps) (AuthRedirectComponent);\r\nexport  default compose(\r\n    connect(mapStateToProps),//2 export  default connect(mapStateToProps) (AuthRedirectComponent)\r\n    WithAuthRedirect//1 WithAuthRedirect(MessageApi)\r\n)(MessageApi)//(MessageApi)\r\n\r\n\r\n"],"sourceRoot":""}