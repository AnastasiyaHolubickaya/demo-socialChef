{"version":3,"sources":["components/Message/Message.module.css","components/Message/AddMessage/AddMessage.module.css","components/Message/Users/Users.module.css","hoc/WithAuthRedirect.tsx","components/Message/Users/Users.tsx","components/Message/AddMessage/AddMessage.tsx","components/Message/Message.tsx","components/Message/MessageApi.tsx"],"names":["module","exports","mapStateToPropsRedirect","state","isAuth","auth","Users","dialog","massUsers","map","d","key","id","className","classes","to","src","photos","small","face","alt","name","mess","status","maxLength300","maxLengthCreator","MessageReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","placeholder","component","Textarea","validate","requiredField","divButtonSend","Button","value","AddMessage","formData","props","addMessActionCreator","message","login","profile","userId","this","getProfileThunkCreator","block","dataDialogs","React","Component","Counter","counterUsers","text","numbers","Message","dialogs","MessageApi","actionsDialog","compose","connect","restProps"],"mappings":"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","file":"static/js/3.9cb6df34.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Message_dialogs__2baLX\",\"searchUsers\":\"Message_searchUsers__9t9jj\",\"title\":\"Message_title__-9VyK\",\"search\":\"Message_search__gkp-3\",\"inputSearch\":\"Message_inputSearch__3V8kI\",\"buttonSearch\":\"Message_buttonSearch__2KJW5\",\"counterUsers\":\"Message_counterUsers__rp0hV\",\"text\":\"Message_text__2kiW0\",\"numbers\":\"Message_numbers__4YsQx\",\"viewingInfo\":\"Message_viewingInfo___2Tny\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"divButtonSend\":\"AddMessage_divButtonSend__30J92\",\"block\":\"AddMessage_block__2zH6u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Users_dialog__3AOii\",\"active\":\"Users_active__1d9P7\"};","import React from \"react\";\r\n\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/store\";\r\n\r\nlet  mapStateToPropsRedirect = (state:AppStateType) =>({\r\n    isAuth: state.auth.isAuth\r\n}as mapStatePropsType);\r\ntype mapStatePropsType={\r\n    isAuth:boolean\r\n}\r\ntype mapDispatchPropsType={\r\n}\r\n export function WithAuthRedirect <CP>(Component:React.ComponentType<CP>) {\r\n     const RedirectComponent:React.FC<mapStatePropsType & mapDispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps}=props\r\n         if (!isAuth) return <Redirect to='/login'/>;\r\n         return <Component{...restProps as CP}/>\r\n     }\r\n\r\n     let ConnectAuthRedirect = connect<mapStatePropsType,mapDispatchPropsType,CP, AppStateType> (mapStateToPropsRedirect)(RedirectComponent);//дважды оборачиваем компоненту в connect чтоб взять из пропсов необходимое let  mapStateToPropsRedirect =...\r\n\r\n    return ConnectAuthRedirect;\r\n}\r\n//WithAuthRedirect - hoc (компонента высшего порядка) функция, которая принимает\r\n//как параметр компоненту и возвращает к ней контейнерную компоненту\r\n// в данном случаее hoc делает перенаправление (с помошью компоненты Redirect)на другую страницу согласно условия","import React from \"react\";\r\nimport classes from './Users.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport face from \"../../../img/icons/user.jpg\";\r\nimport {photoType} from \"../../../redux/types/types\";\r\ntype massUsersPropsType={\r\n    id:number|null\r\n    name:string|null\r\n    status?:string|null\r\n    photos:photoType\r\n    followed?:boolean\r\n    mess?: string|null\r\n}\r\n\r\ntype propsType={\r\n    massUsers: Array<massUsersPropsType>\r\n}\r\nconst Users:React.FC<propsType> = ({massUsers}) =>{\r\n\r\n    //console.log(props);\r\n    //let path='/dialogs/';\r\n    let dialog = massUsers.map(d=>\r\n        <div key={d.id} className={classes.dialog}>\r\n            <NavLink to={'/profile/' + d.id}> <img src={ d.photos.small||face} alt=\"\"/></NavLink>\r\n             <b>{d.name} </b>\r\n            <span>{d.mess||d.status}</span>\r\n\r\n        </div>\r\n    );\r\n\r\n    return( <div>{dialog} </div> )\r\n\r\n};\r\nexport  default  Users;","import React from \"react\";\r\nimport classes from \"./AddMessage.module.css\";\r\nimport Users from \"../Users/Users\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validation/validator\";\r\nimport {Textarea} from \"../../commons/FormControls/FormControls\";\r\nimport Button from \"../../Button/Button\";\r\nimport {dataUsersType, profileType} from \"../../../redux/types/types\";\r\n\r\ntype propsType={\r\n    dataDialogs: Array<dataUsersType>\r\n    login: string|null\r\n    userId: number|null\r\n    profile: profileType|null\r\n    addMessActionCreator:(message:string|null, login:string|null, photo:string, userId:number)=>void\r\n    getProfileThunkCreator:(userId:number)=>void\r\n}\r\n\r\ntype formDataType={\r\n    message: string\r\n    login: string\r\n    profile: profileType|null\r\n}\r\nconst maxLength300 = maxLengthCreator(100);\r\n\r\nconst MessageForm:React.FC<InjectedFormProps<formDataType>> = ({handleSubmit}) =>{\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <div><Field name={'message'} placeholder={'message'} component={Textarea} validate={[requiredField, maxLength300]}/></div>\r\n            <div className={classes.divButtonSend}> <Button  value=\"отправить\"/></div>\r\n        </form>\r\n    )\r\n};\r\nconst MessageReduxForm = reduxForm<formDataType>({//контейнерная компонента,создается редаксформ над презентационной компонентой\r\n    // a unique name for the form\r\n    //каждая форма должна иметь уникальное строковое имя (для распознавания ее редаксформом)\r\n    form: 'message'//form: - это название не связано с form из store.ts\r\n})(MessageForm);\r\n\r\n\r\nclass AddMessage extends  React.Component<propsType> {\r\n    componentDidMount(){\r\n       this.props.getProfileThunkCreator(this.props.userId as number);\r\n    }\r\n    onSubmit = (formData:formDataType) => {// сюда придут данные их формы, передаем эту  функцию в LoginReduxForm чтоб получить эти данные из формы\r\n        // @ts-ignore\r\n        this.props.addMessActionCreator(formData.message,this.props.login, this.props.profile.photos.small as string, this.props.profile.userId);\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <div className={classes.block}>\r\n                <Users massUsers={this.props.dataDialogs}/>\r\n                <h3>Добавить сообщение</h3>\r\n                <MessageReduxForm onSubmit = {this.onSubmit}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport  default  AddMessage;\r\n\r\n/*const AddMessage = (props) =>{\r\n    //console.log(props)\r\n   // let inputRef = React.createRef();\r\n\r\n    let addMess = ()=>{//функция добавления mess\r\n        props.addNewMess();\r\n       // props.dispatch(addMessActionCreator());// вызываем (из пропсов) функцию из BLL\r\n    };\r\n    let changePost = (e) =>{ //функция изменения состояния значения инпута\r\n        let text =e.target.value;// берем введенное значение\r\n        props.changeMess(text);\r\n       // props.dispatch(changePostActionCreator(text));// передаем в функцию из BLL\r\n    };\r\n\r\n    return(\r\n        <div className={classes.block}>\r\n            <Users dataDialogs = {props.dataDialogs}/>\r\n            <h3>добавить сообщение</h3>\r\n            <input onChange={changePost} value={props.newText}  type=\"text\" className={`${classes.input_text} ${classes.reset_properties}`}  placeholder='your news...'/>\r\n            <button onClick={addMess} className={`${classes.send_btn} ${classes.reset_properties}`}>Send </button>\r\n\r\n\r\n        </div>\r\n\r\n    )*/","import React from \"react\";\r\nimport classes from './Message.module.css';\r\nimport AddMessage from \"./AddMessage/AddMessage\";\r\nimport {dataUsersType, profileType} from \"../../redux/types/types\";\r\n\r\n\r\ntype propsType={\r\n    dataDialogs: Array<dataUsersType>\r\n    login: string|null\r\n    userId: number|null\r\n    profile: profileType|null\r\n    addMessActionCreator:(message:string|null, login:string|null, photo:string, userId:number)=>void\r\n    getProfileThunkCreator:(userId:number)=>void\r\n}\r\n\r\nlet Counter = () =>{\r\n  return  (<div className={classes.counterUsers}>\r\n      <span className={classes.text}>всего пользователей online</span>\r\n      <span className={classes.numbers}>5</span>\r\n  </div>)\r\n};\r\n\r\n\r\n\r\nconst Message:React.FC<propsType> = ({dataDialogs,login,userId,profile,addMessActionCreator,getProfileThunkCreator}) =>{\r\n    return(\r\n        <div className={classes.dialogs}>\r\n            <h1>Чат</h1>\r\n\r\n            <Counter/>\r\n\r\n            <AddMessage\r\n                dataDialogs = {dataDialogs}\r\n                login={login}\r\n                userId={userId}\r\n                profile={profile}\r\n                addMessActionCreator = {addMessActionCreator}\r\n                getProfileThunkCreator={getProfileThunkCreator}\r\n            />\r\n        </div>\r\n    )\r\n};\r\nexport  default Message;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport { WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport Message from \"./Message\";\r\nimport {compose} from \"redux\";\r\nimport {actionsDialog} from \"../../redux/dialogReducer\";\r\nimport {getProfileThunkCreator} from \"../../redux/profileReducer\";\r\nimport {dataUsersType, profileType} from \"../../redux/types/types\";\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\n\r\ntype mapStatePropsType={\r\n    dataDialogs: Array<dataUsersType>\r\n    login: string|null\r\n    userId: number|null\r\n    profile: profileType|null\r\n}\r\ntype mapDispatchPropsType={\r\n    addMessActionCreator:(message:string|null, login:string|null, photo:string, userId:number)=>void\r\n    getProfileThunkCreator:(userId:number)=>void\r\n}\r\ntype ownProps={}\r\ntype propsType = mapStatePropsType & mapDispatchPropsType & ownProps;\r\n\r\nclass MessageApi extends  React.Component<propsType>{\r\n    componentDidMount(){\r\n    }\r\n    render() {\r\n        return(\r\n            <Message\r\n                dataDialogs = {this.props.dataDialogs}\r\n                login={this.props.login}\r\n                  userId={this.props.userId}\r\n                  profile={this.props.profile}\r\n                 addMessActionCreator = {this.props.addMessActionCreator}\r\n                  getProfileThunkCreator={this.props.getProfileThunkCreator}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType):mapStatePropsType =>({\r\n    dataDialogs: state.dialogs.dataDialogs,\r\n    login: state.auth.login,\r\n    userId: state.auth.userId,\r\n    profile: state.profile.profile\r\n});\r\nconst addMessActionCreator= actionsDialog.addMessActionCreator;\r\n// чтоб каждый раз не передавать через пропсы данные, необходимые hoc , одорачиваем ее в connect дважды - см WithAuthRedirect.tsx\r\n//заменяем оборачивание компонент  одной функцией - compose (идем снизу вверх)\r\n//let AuthRedirectComponent = WithAuthRedirect(MessageApi);\r\n//export  default connect(mapStateToProps) (AuthRedirectComponent);\r\nexport  default compose(\r\n    //<TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultRootState>\r\n    connect < mapStatePropsType, mapDispatchPropsType,  ownProps, AppStateType>(\r\n        mapStateToProps,\r\n        {addMessActionCreator, getProfileThunkCreator}),//2 export  default connect(mapStateToProps) (AuthRedirectComponent)\r\n    WithAuthRedirect//1 WithAuthRedirect(MessageApi)\r\n)(MessageApi)as React.ComponentType//(MessageApi)\r\n\r\n\r\n"],"sourceRoot":""}