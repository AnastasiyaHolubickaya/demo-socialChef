{"version":3,"sources":["components/chat/chat.module.css","components/chat/Chat.tsx","pages/chatPage/ChatPage.tsx"],"names":["module","exports","ws","WebSocket","Chat","className","classes","chat_container","ChatMessage","useState","messages","setMessages","useEffect","addEventListener","event","newMessage","JSON","parse","data","prevMessage","block_message","map","m","index","key","msg","Message","chat_mess","photo","src","alt","avatar_style","icon","UserOutlined","userName","message","ChatForm","chat_form","enableReinitialize","initialValues","onSubmit","values","onSubmitProps","send","resetForm","formik","form__formSearch","FormikControl","control","label","name","form__button","type","disabled","readyState","OPEN","ChatPage","style","width"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,eAAiB,6BAA6B,UAAY,wBAAwB,UAAY,wBAAwB,cAAgB,4BAA4B,aAAe,6B,iICO7LC,EAAK,IAAIC,UAAU,kEAUZC,EAAgB,WACzB,OAAO,yBAAKC,UAAWC,IAAQC,gBAC3B,kBAAC,EAAD,MACA,kBAAC,EAAD,QAIFC,EAAuB,WAAM,IAAD,EACEC,mBAA4B,IAD9B,mBACvBC,EADuB,KACbC,EADa,KAa9B,OAXAC,qBAAU,WAGNV,EAAGW,iBAAiB,WAAW,SAACC,GAC3B,IAAIC,EAAcC,KAAKC,MAAMH,EAAMI,MACpCP,GAAY,SAACQ,GAAD,4BAAqBA,GAArB,YAAqCJ,YAGvD,IAGK,yBAAKV,UAAWC,IAAQc,eAC1BV,EAASW,KAAI,SAACC,EAAGC,GAAJ,OACV,kBAAC,EAAD,CAASC,IAAKD,EAAOE,IAAKH,SAIhCI,EAA0C,SAAC,GAAU,IAATD,EAAQ,EAARA,IAC9C,OAAO,yBAAKpB,UAAWC,IAAQqB,WACd,KAAZF,EAAIG,MACA,yBAAKC,IAAKJ,EAAIG,MAAOE,IAAI,KACzB,kBAAC,IAAD,CAAQzB,UAAWC,IAAQyB,aAAcD,IAAK,SAAWE,KAAM,kBAACC,EAAA,EAAD,QAEpE,8BAAOR,EAAIS,UACX,2BAAIT,EAAIU,SACR,+BAGFC,EAAoB,WAAM,IAAD,EACD3B,mBAA8B,WAD7B,6BAM3BG,qBAAU,WACNV,EAAGW,iBAAiB,QAAO,iBAK7B,IAMF,OAAO,yBAAKR,UAAWC,IAAQ+B,WAC3B,kBAAC,IAAD,CACIC,oBAAkB,EAClBC,cAnBe,CACnBJ,QAAQ,IAmBJK,SARO,SAAEC,EAAYC,GACzBxC,EAAGyC,KAAKF,EAAON,SACfO,EAAcE,eAQN,SAAAC,GAAM,OAAE,kBAAC,IAAD,CAAMxC,UAAWC,IAAQwC,kBAC7B,kBAACC,EAAA,EAAD,CAAeC,QAAQ,WAAYC,MAAM,UAAUC,KAAK,YACxD,4BAAQ7C,UAAWC,IAAQ6C,aAAcC,KAAK,SAASC,SAAUnD,EAAGoD,aAAenD,UAAUoD,MAA7F,gECvEJC,UAPW,WACvB,OAAO,yBAAKC,MAAO,CAAEC,MAAO,UACxB,kBAAC,EAAD","file":"static/js/4.2b2cffd0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat_container\":\"chat_chat_container__1J-9K\",\"chat_form\":\"chat_chat_form__1zCED\",\"chat_mess\":\"chat_chat_mess__2c_Yi\",\"block_message\":\"chat_block_message__1it4C\",\"avatar_style\":\"chat_avatar_style__14WuQ\"};","import React, {useEffect, useState} from \"react\";\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport classes from \"./chat.module.css\";\r\nimport {Avatar} from \"antd\";\r\nimport {Form, Formik} from \"formik\";\r\nimport FormikControl from \"../Formik/FormikControl\";\r\n\r\n//создаем канал коммуникации по web socket и получаем сообщения в режиме online\r\nconst ws = new WebSocket(\"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\\n\");\r\n\r\nexport  type ChatMessageType = {\r\n    message: string\r\n    photo:   string\r\n    userId: number\r\n    userName: string\r\n\r\n}\r\n\r\nexport const Chat:React.FC = () =>{\r\n    return <div className={classes.chat_container}>\r\n        <ChatMessage/>\r\n        <ChatForm/>\r\n    </div>\r\n};\r\n\r\nconst ChatMessage:React.FC = () =>{\r\n    const [messages, setMessages] = useState<ChatMessageType[]>([]);\r\n    useEffect(()=>{\r\n\r\n        //подписываемся на событие в websocket канале\r\n        ws.addEventListener(\"message\", (event: MessageEvent) => {\r\n             let newMessage =  JSON.parse(event.data);\r\n            setMessages((prevMessage) => [...prevMessage, ...newMessage]);\r\n            }\r\n        )\r\n    },[]);\r\n\r\n\r\n    return <div className={classes.block_message}>\r\n        {messages.map((m, index) =>\r\n            <Message key={index} msg={m}/>\r\n        )}\r\n    </div>\r\n};\r\nconst Message:React.FC<{msg:ChatMessageType}> = ({msg}) =>{\r\n    return <div className={classes.chat_mess} >\r\n        {msg.photo!==\"\"\r\n            ?<img src={msg.photo} alt=\"\"/>\r\n            :<Avatar className={classes.avatar_style} alt={'avatar'}  icon={<UserOutlined />} />\r\n        }\r\n        <span>{msg.userName}</span>\r\n        <p>{msg.message}</p>\r\n        <hr/>\r\n    </div>\r\n};\r\nconst ChatForm:React.FC = () =>{\r\n    const [ready, setReady] = useState<'pending' | 'ready'>('pending');\r\n    const  initialValues = {\r\n        message:''\r\n    };\r\n    type initialValuesType  = typeof initialValues;\r\n    useEffect(()=>{\r\n        ws.addEventListener('open',() => {\r\n\r\n        })\r\n\r\n\r\n    },[]);\r\n\r\n    const onSubmit=( values:any, onSubmitProps:any) =>{\r\n        ws.send(values.message);\r\n        onSubmitProps.resetForm()\r\n    };\r\n    return <div className={classes.chat_form}>\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={initialValues}\r\n            onSubmit={onSubmit}>\r\n            {\r\n                formik=><Form className={classes.form__formSearch}>\r\n                    <FormikControl control='textarea'  label='Message' name='message'/>\r\n                    <button className={classes.form__button} type='submit' disabled={ws.readyState !== WebSocket.OPEN}>Отправить</button>\r\n                </Form>\r\n            }\r\n        </Formik>\r\n    </div>\r\n};\r\n\r\n/*<div><textarea name={'message'} placeholder={'message'} /></div>\r\n        <div className={classes.divButtonSend}> <Button onClick={sendMessage} value=\"отправить\"/></div>*/","import React from \"react\";\r\nimport {Chat} from \"../../components/chat/Chat\";\r\n\r\n const ChatPage:React.FC = () =>{\r\n    return <div style={{ width: \"400px\"}}>\r\n        <Chat/>\r\n    </div>\r\n};\r\n\r\n\r\n export default ChatPage;"],"sourceRoot":""}