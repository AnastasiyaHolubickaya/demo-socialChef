{"version":3,"sources":["components/Message/AddMessage/AddMessage.module.css","hoc/WithAuthRedirect.js","components/Message/AddMessage/AddMessage.tsx","components/Message/Message.tsx","components/Message/MessageApi.tsx"],"names":["module","exports","mapStateToPropsRedirect","state","isAuth","auth","maxLength300","maxLengthCreator","MessageReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","name","placeholder","component","Textarea","validate","requiredField","className","classes","divButtonSend","Button","value","AddMessage","formData","props","addMessActionCreator","message","login","profile","photos","small","userId","this","getProfileThunkCreator","block","Users","massUsers","dataDialogs","React","Component","Counter","counterUsers","text","numbers","Message","dialogs","SearchUsersContainer","MessageApi","compose","connect","RedirectComponent","to"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,cAAgB,kCAAkC,MAAQ,4B,oHCIvEC,EAA0B,SAACC,GAAD,MAAW,CACtCC,OAAQD,EAAME,KAAKD,S,sFCcjBE,EAAeC,YAAiB,KAUhCC,EAAmBC,YAAU,CAG/BC,KAAM,WAHeD,EARuB,SAAC,GAAmB,IAAlBE,EAAiB,EAAjBA,aAC9C,OACI,0BAAMC,SAAUD,GACZ,6BAAK,kBAACE,EAAA,EAAD,CAAOC,KAAM,UAAWC,YAAa,UAAWC,UAAWC,IAAUC,SAAU,CAACC,IAAeb,MACpG,yBAAKc,UAAWC,IAAQC,eAAxB,IAAwC,kBAACC,EAAA,EAAD,CAASC,MAAM,gEAmClDC,E,2MAlBbb,SAAW,SAACc,GACT,EAAKC,MAAMC,qBAAqBF,EAASG,QAAQ,EAAKF,MAAMG,MAAO,EAAKH,MAAMI,QAAQC,OAAOC,MAAiB,EAAKN,MAAMI,QAAQG,S,mFAJjIC,KAAKR,MAAMS,uBAAuBD,KAAKR,MAAMO,U,+BAS5C,OACI,yBAAKd,UAAWC,IAAQgB,OACpB,kBAACC,EAAA,EAAD,CAAOC,UAAWJ,KAAKR,MAAMa,cAC7B,uIACA,kBAAChC,EAAD,CAAkBI,SAAYuB,KAAKvB,gB,GAhBzB6B,IAAMC,W,SCtB5BC,EAAU,WACZ,OAAS,yBAAKvB,UAAWC,IAAQuB,cAC7B,0BAAMxB,UAAWC,IAAQwB,MAAzB,wHACA,0BAAMzB,UAAWC,IAAQyB,SAAzB,OAwBUC,EAlBoB,SAAC,GAAmF,IAAlFP,EAAiF,EAAjFA,YAAYV,EAAqE,EAArEA,MAAMI,EAA+D,EAA/DA,OAAOH,EAAwD,EAAxDA,QAAQH,EAAgD,EAAhDA,qBAAqBQ,EAA2B,EAA3BA,uBACxF,OACI,yBAAKhB,UAAWC,IAAQ2B,SACpB,kDACA,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACIT,YAAeA,EACfV,MAAOA,EACPI,OAAQA,EACRH,QAASA,EACTH,qBAAwBA,EACxBQ,uBAAwBA,M,wBCXlCc,E,8NAME,OACI,kBAAC,EAAD,CACIV,YAAeL,KAAKR,MAAMa,YAC1BV,MAAOK,KAAKR,MAAMG,MAChBI,OAAQC,KAAKR,MAAMO,OACnBH,QAASI,KAAKR,MAAMI,QACrBH,qBAAwBO,KAAKR,MAAMC,qBAClCQ,uBAAwBD,KAAKR,MAAMS,6B,GAb3BK,IAAMC,WA+BhBS,sBACZC,aAXkB,SAACjD,GAAD,MAA0C,CAC5DqC,YAAarC,EAAM6C,QAAQR,YAC3BV,MAAO3B,EAAME,KAAKyB,MAClBI,OAAQ/B,EAAME,KAAK6B,OACnBH,QAAS5B,EAAM4B,QAAQA,WASnB,CAACH,yBAAsBQ,8BHnDE,SAACM,GAAc,IACtCW,EADqC,iLAGnC,OAAKlB,KAAKR,MAAMvB,OACT,kBAACsC,EAAaP,KAAKR,OADK,kBAAC,IAAD,CAAU2B,GAAK,eAHX,GACVb,IAAMC,WAQvC,OAF0BU,YAASlD,EAATkD,CAAkCC,KGyChDF,CAKdD","file":"static/js/3.69f2ab7f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"divButtonSend\":\"AddMessage_divButtonSend__30J92\",\"block\":\"AddMessage_block__2zH6u\"};","import React from \"react\";\r\n\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet  mapStateToPropsRedirect = (state) =>({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n export const WithAuthRedirect = (Component) =>{\r\n    class RedirectComponent extends  React.Component{\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to = '/login'/>;\r\n            return <Component{...this.props}/>\r\n        }\r\n    }\r\n    let ConnectAuthRedirect = connect (mapStateToPropsRedirect)(RedirectComponent);//дважды оборачиваем компоненту в connect чтоб взять из пропсов необходимое let  mapStateToPropsRedirect =...\r\n\r\n    return ConnectAuthRedirect;\r\n};\r\n//WithAuthRedirect - hoc (компонента высшего порядка) функция, которая принимает\r\n//как параметр компоненту и возвращает к ней контейнерную компоненту\r\n// в данном случаее hoc делает перенаправление (с помошью компоненты Redirect)на другую страницу согласно условия","import React from \"react\";\r\nimport classes from \"./AddMessage.module.css\";\r\nimport Users from \"../Users/Users\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validation/validator\";\r\nimport {Textarea} from \"../../commons/FormControls/FormControls\";\r\nimport Button from \"../../Button/Button\";\r\nimport {dataUsersType, profileType} from \"../../../redux/types/types\";\r\n\r\ntype propsType={\r\n    dataDialogs: Array<dataUsersType>\r\n    login: string|null\r\n    userId: number|null\r\n    profile: profileType\r\n    addMessActionCreator:(message:string|null, login:string|null, photo:string, userId:number)=>void\r\n    getProfileThunkCreator:(userId:number)=>void\r\n}\r\ntype messFormPropsType={\r\n    handleSubmit:any\r\n}\r\nconst maxLength300 = maxLengthCreator(100);\r\n\r\nconst MessageForm:React.FC<messFormPropsType> = ({handleSubmit}) =>{\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <div><Field name={'message'} placeholder={'message'} component={Textarea} validate={[requiredField, maxLength300]}/></div>\r\n            <div className={classes.divButtonSend}> <Button  value=\"отправить\"/></div>\r\n        </form>\r\n    )\r\n};\r\nconst MessageReduxForm = reduxForm({//контейнерная компонента,создается редаксформ над презентационной компонентой\r\n    // a unique name for the form\r\n    //каждая форма должна иметь уникальное строковое имя (для распознавания ее редаксформом)\r\n    form: 'message'//form: - это название не связано с form из store.ts\r\n})(MessageForm);\r\n\r\n\r\nclass AddMessage extends  React.Component<propsType> {\r\n    //\r\n    componentDidMount(){\r\n       this.props.getProfileThunkCreator(this.props.userId as number);\r\n    }\r\n\r\n    onSubmit = (formData:any) => {// сюда придут данные их формы, передаем эту  функцию в LoginReduxForm чтоб получить эти данные из формы\r\n       this.props.addMessActionCreator(formData.message,this.props.login, this.props.profile.photos.small as string, this.props.profile.userId);\r\n    };\r\n\r\n\r\n    render() {\r\n        return(\r\n            <div className={classes.block}>\r\n                <Users massUsers={this.props.dataDialogs}/>\r\n                <h3>Добавить сообщение</h3>\r\n                <MessageReduxForm onSubmit = {this.onSubmit}/>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n\r\n}\r\nexport  default  AddMessage;\r\n\r\n/*const AddMessage = (props) =>{\r\n    //console.log(props)\r\n   // let inputRef = React.createRef();\r\n\r\n    let addMess = ()=>{//функция добавления mess\r\n        props.addNewMess();\r\n       // props.dispatch(addMessActionCreator());// вызываем (из пропсов) функцию из BLL\r\n    };\r\n    let changePost = (e) =>{ //функция изменения состояния значения инпута\r\n        let text =e.target.value;// берем введенное значение\r\n        props.changeMess(text);\r\n       // props.dispatch(changePostActionCreator(text));// передаем в функцию из BLL\r\n    };\r\n\r\n    return(\r\n        <div className={classes.block}>\r\n            <Users dataDialogs = {props.dataDialogs}/>\r\n            <h3>добавить сообщение</h3>\r\n            <input onChange={changePost} value={props.newText}  type=\"text\" className={`${classes.input_text} ${classes.reset_properties}`}  placeholder='your news...'/>\r\n            <button onClick={addMess} className={`${classes.send_btn} ${classes.reset_properties}`}>Send </button>\r\n\r\n\r\n        </div>\r\n\r\n    )*/","import React from \"react\";\r\nimport classes from './Message.module.css';\r\nimport AddMessage from \"./AddMessage/AddMessage\";\r\nimport SearchUsersContainer from \"../SearchUsers/SearchUsersContainer\";\r\nimport {dataUsersType, profileType} from \"../../redux/types/types\";\r\n\r\ntype propsType={\r\n    dataDialogs: Array<dataUsersType>\r\n    login: string|null\r\n    userId: number|null\r\n    profile: profileType\r\n    addMessActionCreator:(message:string|null, login:string|null, photo:string, userId:number)=>void\r\n    getProfileThunkCreator:(userId:number)=>void\r\n}\r\n\r\nlet Counter = () =>{\r\n  return  (<div className={classes.counterUsers}>\r\n      <span className={classes.text}>всего пользователей online</span>\r\n      <span className={classes.numbers}>5</span>\r\n  </div>)\r\n};\r\n\r\n\r\n\r\nconst Message:React.FC<propsType> = ({dataDialogs,login,userId,profile,addMessActionCreator,getProfileThunkCreator}) =>{\r\n    return(\r\n        <div className={classes.dialogs}>\r\n            <h1>Чат</h1>\r\n            <SearchUsersContainer/>\r\n            <Counter/>\r\n\r\n            <AddMessage\r\n                dataDialogs = {dataDialogs}\r\n                login={login}\r\n                userId={userId}\r\n                profile={profile}\r\n                addMessActionCreator = {addMessActionCreator}\r\n                getProfileThunkCreator={getProfileThunkCreator}\r\n            />\r\n        </div>\r\n    )\r\n};\r\nexport  default Message;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport { WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport Message from \"./Message\";\r\nimport {compose} from \"redux\";\r\nimport {addMessActionCreator} from \"../../redux/dialogReducer\";\r\nimport {getProfileThunkCreator} from \"../../redux/profileReducer\";\r\nimport {dataUsersType, profileType} from \"../../redux/types/types\";\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\n\r\ntype mapStatePropsType={\r\n    dataDialogs: Array<dataUsersType>\r\n    login: string|null\r\n    userId: number|null\r\n    profile: profileType\r\n}\r\ntype mapDispatchPropsType={\r\n    addMessActionCreator:(message:string|null, login:string|null, photo:string, userId:number)=>void\r\n    getProfileThunkCreator:(userId:number)=>void\r\n}\r\ntype ownProps={}\r\n\r\ntype propsType = mapStatePropsType & mapDispatchPropsType & ownProps;\r\n\r\n\r\nclass MessageApi extends  React.Component<propsType>{\r\n\r\n    componentDidMount(){\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Message\r\n                dataDialogs = {this.props.dataDialogs}\r\n                login={this.props.login}\r\n                  userId={this.props.userId}\r\n                  profile={this.props.profile}\r\n                 addMessActionCreator = {this.props.addMessActionCreator}\r\n                  getProfileThunkCreator={this.props.getProfileThunkCreator}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType):mapStatePropsType =>({\r\n    dataDialogs: state.dialogs.dataDialogs,\r\n    login: state.auth.login,\r\n    userId: state.auth.userId,\r\n    profile: state.profile.profile\r\n});\r\n// чтоб каждый раз не передавать через пропсы данные, необходимые hoc , одорачиваем ее в connect дважды - см WithAuthRedirect.js\r\n//заменяем оборачивание компонент  одной функцией - compose (идем снизу вверх)\r\n//let AuthRedirectComponent = WithAuthRedirect(MessageApi);\r\n//export  default connect(mapStateToProps) (AuthRedirectComponent);\r\nexport  default compose(\r\n    connect (\r\n        mapStateToProps,\r\n        {addMessActionCreator, getProfileThunkCreator}),//2 export  default connect(mapStateToProps) (AuthRedirectComponent)\r\n    WithAuthRedirect//1 WithAuthRedirect(MessageApi)\r\n)(MessageApi)//(MessageApi)\r\n\r\n\r\n"],"sourceRoot":""}